library(tidyr)
library (tibble)
library(ggplot2)
# Importation des données
setwd("~/APT/2A/UC/UP- BEE4BIO")
#dir()
donnees <- read_xlsx("Méga Excel - 16-04-2025.xlsx", sheet = "Données brutes")
#donnees
# Modification de la colonne "Effectif"
donnees <- donnees %>%
mutate(Effectif = ifelse(Effectif == "presence", 0, Effectif),
Effectif = as.numeric(Effectif))
# Transformation de certaines colonnes en facteurs
donnees$Ordre <- as.factor(donnees$Ordre)
donnees$Famille <- as.factor(donnees$Famille)
donnees$Taxon_utilise <- as.factor(donnees$Taxon_utilise)
# Résumé des données
summary(donnees)
boxplot(Effectif ~ Ordre, data = donnees)
boxplot(Effectif ~ Famille, data = donnees)
boxplot(Effectif ~ Taxon_utilise, data = donnees)
# Regroupement des effectifs en cas de doublons (c'est pas le cas normalement, jsp pas pourquoi mais ça marche pas sans)
donnees_somme <- donnees %>%
group_by(Code_echantillon, Taxon_utilise) %>%
summarise(Effectif = sum(Effectif, na.rm = TRUE), .groups = "drop")
donnees_somme
# Transformation en tableau échantillons x taxons
tableau <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Code_echantillon")
tableau
# Indice de Shannon
indice_shannon <- diversity(tableau, index = "shannon")
# Indice de Simpson
indice_simpson <- diversity(tableau, index = "simpson")
# Afficher les résultats
Indices <- data.frame(Code_echantillon = rownames(tableau),
Shannon = indice_shannon,
Simpson = indice_simpson)
Indices
donnees <- donnees %>%
mutate(Localisation = ifelse(grepl("_AM_", Code_echantillon), "AM",
ifelse(grepl("_AV_", Code_echantillon), "AV", NA)))
donnees
richesse_par_echantillon <- donnees %>%
filter(Effectif > 0) %>%
group_by(Code_echantillon, Localisation) %>%
summarise(Richesse = n_distinct(Taxon_utilise), .groups = "drop")
richesse_par_echantillon
donnees_regroupees_loc <- donnees %>%
group_by(Localisation, Taxon_utilise) %>%
summarise(Effectif_total = sum(Effectif), .groups = "drop")
print (donnees_regroupees_loc)
# On garde les taxon où effectif > 0
donnees_filtrees <- donnees %>%
filter(Effectif > 0)
# Calcul de la richesse spécifique par localisation
richesse_par_groupe <- donnees_filtrees %>%
group_by(Localisation) %>%
summarise(Nb_taxons = n_distinct(Taxon_utilise), .groups = "drop")
# Graphe
ggplot(richesse_par_groupe, aes(x = Localisation, y = Nb_taxons, fill = Localisation)) +
geom_col(width = 0.6) +
theme_minimal() +
labs(title = "Richesse spécifique totale par localisation par rapport au rejet",
x = "Groupe", y = "Nombre de taxons") +
theme(legend.position = "none")
# Transformation en tableau échantillons x taxons
tableau <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Localisation")
# Importation des librairies
library(readxl)
library(FSA)
library(vegan)
library(dplyr)
library(tidyr)
library (tibble)
library(ggplot2)
# Importation des données
setwd("~/APT/2A/UC/UP- BEE4BIO")
#dir()
donnees <- read_xlsx("Méga Excel - 16-04-2025.xlsx", sheet = "Données brutes")
#donnees
# Modification de la colonne "Effectif"
donnees <- donnees %>%
mutate(Effectif = ifelse(Effectif == "presence", 0, Effectif),
Effectif = as.numeric(Effectif))
# Transformation de certaines colonnes en facteurs
donnees$Ordre <- as.factor(donnees$Ordre)
donnees$Famille <- as.factor(donnees$Famille)
donnees$Taxon_utilise <- as.factor(donnees$Taxon_utilise)
# Résumé des données
summary(donnees)
boxplot(Effectif ~ Ordre, data = donnees)
boxplot(Effectif ~ Famille, data = donnees)
boxplot(Effectif ~ Taxon_utilise, data = donnees)
# Regroupement des effectifs en cas de doublons (c'est pas le cas normalement, jsp pas pourquoi mais ça marche pas sans)
donnees_somme <- donnees %>%
group_by(Code_echantillon, Taxon_utilise) %>%
summarise(Effectif = sum(Effectif, na.rm = TRUE), .groups = "drop")
donnees_somme
# Transformation en tableau échantillons x taxons
tableau <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Code_echantillon")
tableau
# Indice de Shannon
indice_shannon <- diversity(tableau, index = "shannon")
# Indice de Simpson
indice_simpson <- diversity(tableau, index = "simpson")
# Afficher les résultats
Indices <- data.frame(Code_echantillon = rownames(tableau),
Shannon = indice_shannon,
Simpson = indice_simpson)
Indices
donnees_loc <- donnees %>%
mutate(Localisation = ifelse(grepl("_AM_", Code_echantillon), "AM",
ifelse(grepl("_AV_", Code_echantillon), "AV", NA)))
donnees_loc
richesse_par_echantillon <- donnees_loc %>%
filter(Effectif > 0) %>%
group_by(Code_echantillon, Localisation) %>%
summarise(Richesse = n_distinct(Taxon_utilise), .groups = "drop")
richesse_par_echantillon
donnees_regroupees_loc <- donnees_loc %>%
group_by(Localisation, Taxon_utilise) %>%
summarise(Effectif_total = sum(Effectif), .groups = "drop")
print (donnees_regroupees_loc)
# On garde les taxon où effectif > 0
donnees_filtrees <- donnees_loc %>%
filter(Effectif > 0)
# Calcul de la richesse spécifique par localisation
richesse_par_groupe <- donnees_filtrees %>%
group_by(Localisation) %>%
summarise(Nb_taxons = n_distinct(Taxon_utilise), .groups = "drop")
# Graphe
ggplot(richesse_par_groupe, aes(x = Localisation, y = Nb_taxons, fill = Localisation)) +
geom_col(width = 0.6) +
theme_minimal() +
labs(title = "Richesse spécifique totale par localisation par rapport au rejet",
x = "Groupe", y = "Nombre de taxons") +
theme(legend.position = "none")
# Regroupement des effectifs en cas de doublons (c'est pas le cas normalement, jsp pas pourquoi mais ça marche pas sans)
donnees_somme <- donnees_loc %>%
group_by(Localisation, Taxon_utilise) %>%
summarise(Effectif = sum(Effectif, na.rm = TRUE), .groups = "drop")
donnees_somme
# Transformation en tableau échantillons x taxons
tableau <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Localisation")
tableau
# Regroupement des effectifs en cas de doublons (c'est pas le cas normalement, jsp pas pourquoi mais ça marche pas sans)
donnees_somme <- donnees_loc %>%
group_by(Localisation, Taxon_utilise) %>%
summarise(Effectif = sum(Effectif, na.rm = TRUE), .groups = "drop")
donnees_somme
# Transformation en tableau échantillons x taxons
tableau_loc <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Localisation")
tableau_loc
# Indice de Shannon
indice_shannon_loc <- diversity(tableau_loc, index = "shannon")
# Indice de Simpson
indice_simpson_loc <- diversity(tableau_loc, index = "simpson")
# Afficher les résultats
Indices_loc <- data.frame(Code_echantillon = rownames(tableau),
Shannon = indice_shannon,
Simpson = indice_simpson)
# Indice de Shannon
indice_shannon_loc <- diversity(tableau_loc, index = "shannon")
# Indice de Simpson
indice_simpson_loc <- diversity(tableau_loc, index = "simpson")
# Afficher les résultats
Indices_loc <- data.frame(Localisation = rownames(tableau),
Shannon = indice_shannon,
Simpson = indice_simpson)
# Indice de Shannon
indice_shannon_loc <- diversity(tableau_loc, index = "shannon")
# Indice de Simpson
indice_simpson_loc <- diversity(tableau_loc, index = "simpson")
# Afficher les résultats
Indices_loc <- data.frame(Localisation = rownames(tableau),
Shannon = indice_shannon_loc,
Simpson = indice_simpson_loc)
Indices_loc
# Importation des librairies
library(readxl)
library(FSA)
library(vegan)
library(dplyr)
library(tidyr)
library (tibble)
library(ggplot2)
# Importation des données
setwd("~/APT/2A/UC/UP- BEE4BIO")
#dir()
donnees <- read_xlsx("Méga Excel.xlsx", sheet = "Données brutes")
#donnees
# Modification de la colonne "Effectif"
donnees <- donnees %>%
mutate(Effectif = ifelse(Effectif == "presence", 0, Effectif),
Effectif = as.numeric(Effectif))
# Transformation de certaines colonnes en facteurs
donnees$Ordre <- as.factor(donnees$Ordre)
donnees$Famille <- as.factor(donnees$Famille)
donnees$Taxon_utilise <- as.factor(donnees$Taxon_utilise)
# Résumé des données
summary(donnees)
boxplot(Effectif ~ Ordre, data = donnees)
boxplot(Effectif ~ Famille, data = donnees)
boxplot(Effectif ~ Taxon_utilise, data = donnees)
# Regroupement des effectifs en cas de doublons (c'est pas le cas normalement, jsp pas pourquoi mais ça marche pas sans)
donnees_somme <- donnees %>%
group_by(Code_echantillon, Taxon_utilise) %>%
summarise(Effectif = sum(Effectif, na.rm = TRUE), .groups = "drop")
donnees_somme
# Transformation en tableau échantillons x taxons
tableau <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Code_echantillon")
tableau
# Indice de Shannon
indice_shannon <- diversity(tableau, index = "shannon")
# Indice de Simpson
indice_simpson <- diversity(tableau, index = "simpson")
# Afficher les résultats
Indices <- data.frame(Code_echantillon = rownames(tableau),
Shannon = indice_shannon,
Simpson = indice_simpson)
Indices
donnees_loc <- donnees %>%
mutate(Localisation = ifelse(grepl("_AM_", Code_echantillon), "AM",
ifelse(grepl("_AV_", Code_echantillon), "AV", NA)))
donnees_loc
richesse_par_echantillon <- donnees_loc %>%
filter(Effectif > 0) %>%
group_by(Code_echantillon, Localisation) %>%
summarise(Richesse = n_distinct(Taxon_utilise), .groups = "drop")
richesse_par_echantillon
donnees_regroupees_loc <- donnees_loc %>%
group_by(Localisation, Taxon_utilise) %>%
summarise(Effectif_total = sum(Effectif), .groups = "drop")
print (donnees_regroupees_loc)
# On garde les taxon où effectif > 0
donnees_filtrees <- donnees_loc %>%
filter(Effectif > 0)
# Calcul de la richesse spécifique par localisation
richesse_par_groupe <- donnees_filtrees %>%
group_by(Localisation) %>%
summarise(Nb_taxons = n_distinct(Taxon_utilise), .groups = "drop")
# Graphe
ggplot(richesse_par_groupe, aes(x = Localisation, y = Nb_taxons, fill = Localisation)) +
geom_col(width = 0.6) +
theme_minimal() +
labs(title = "Richesse spécifique totale par localisation par rapport au rejet",
x = "Groupe", y = "Nombre de taxons") +
theme(legend.position = "none")
# Regroupement des effectifs en cas de doublons (c'est pas le cas normalement, jsp pas pourquoi mais ça marche pas sans)
donnees_somme <- donnees_loc %>%
group_by(Localisation, Taxon_utilise) %>%
summarise(Effectif = sum(Effectif, na.rm = TRUE), .groups = "drop")
donnees_somme
# Transformation en tableau échantillons x taxons
tableau_loc <- donnees_somme %>%
pivot_wider(names_from = Taxon_utilise,
values_from = Effectif,
values_fill = 0) %>%
column_to_rownames(var = "Localisation")
tableau_loc
# Indice de Shannon
indice_shannon_loc <- diversity(tableau_loc, index = "shannon")
# Indice de Simpson
indice_simpson_loc <- diversity(tableau_loc, index = "simpson")
# Afficher les résultats
Indices_loc <- data.frame(Localisation = rownames(tableau),
Shannon = indice_shannon_loc,
Simpson = indice_simpson_loc)
Indices_loc
# Indice de Shannon
indice_shannon_loc <- diversity(tableau_loc, index = "shannon")
# Indice de Simpson
indice_simpson_loc <- diversity(tableau_loc, index = "simpson")
# Afficher les résultats
Indices_loc <- data.frame(Localisation = rownames(tableau_loc),
Shannon = indice_shannon_loc,
Simpson = indice_simpson_loc)
Indices_loc
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# install.packages("NetIndices")
# install.packages("tidyverse")
# if (! "remotes" %in% installed.packages()[,"Package"]) {install.packages("remotes")}
# # Install package limSolve from its GitHub repo
# remotes::install_github("https://github.com/karlines/limSolve")
#
# # Install package remotes if not already installed
# if (! "remotes" %in% installed.packages()[,"Package"]) {install.packages("remotes")}
# # Install package samplelim from its GitHub repo
# remotes::install_github("https://github.com/pregnault/samplelim")
library(NetIndices)
install.packages("NetIndices")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# install.packages("NetIndices")
# install.packages("tidyverse")
# if (! "remotes" %in% installed.packages()[,"Package"]) {install.packages("remotes")}
# # Install package limSolve from its GitHub repo
# remotes::install_github("https://github.com/karlines/limSolve")
#
# # Install package remotes if not already installed
# if (! "remotes" %in% installed.packages()[,"Package"]) {install.packages("remotes")}
# # Install package samplelim from its GitHub repo
# remotes::install_github("https://github.com/pregnault/samplelim")
library(NetIndices)
library(tidyverse)
library(samplelim)
# Select you own path, after going into Session/Set working directory/Choose Directory
#setwd("C:/TravauxNathalie/PortoIEM2025")
lim1 <- df2lim("declaration_file_short_bowf.txt")
lim2 <- df2lim("declaration_file_short_reef.txt")
rlim1 <- rlim(lim1, nsamp = 100000, jmp = 10)
rlim2 <- rlim(lim2, nsamp = 100000, jmp = 10)
# Create data for boxplot
rlim1 <- as.data.frame(rlim1)
rlim2 <- as.data.frame(rlim2)
rlim1$groupe <- "rlim1"
rlim2$groupe <- "rlim2"
data <- bind_rows(rlim1, rlim2) %>%
pivot_longer(cols = -c("groupe"), names_to = "variable", values_to = "valeur")
medianes <- data %>%
filter(groupe == "rlim1") %>%
group_by(variable) %>%
summarize(mediane = median(valeur)) %>%
arrange(desc(mediane)) %>%
pull(variable)
data$variable <- factor(data$variable, levels = medianes)
# Boxplot with medians in descending order
ggplot(data, aes(x = variable, y = valeur, fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values (gC/m2/an)") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Boxplot with log_10 scale
ggplot(data, aes(x = variable, y = valeur, fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
scale_y_log10()+
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "log10(Values)") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Indices <-  function(lim,    # web specifications
rlim,   # random samples
imp,    # import
ext,    # export
dead,   # dead compartments (TL=1)
res)    # respiration
{
# From flow numbers to flow matrix
flowmat    <- lim$Flowmatrix
flowmatrix <- flowmat
ii         <- which(flowmat > 0, arr.ind = TRUE)
# Random ensemble of samples => to calculate the ecological properties in all samples
X          <- rlim # corresponds to the random solutions
# Empty variables
# will contain all network indices
Indices    <- NULL
SOI <- DH <- numeric(nrow(X))
#Calculation of the SOI and D/H index
flowdh <- rlim
flowdh <- as.data.frame(flowdh)
cols_phy <- grep("PHY->", names(flowdh), value = TRUE)
cols_phy <- cols_phy[!grepl("LOS|RES", cols_phy)]
H <- flowdh[, cols_phy]
cols_det <- grep("DET->", names(flowdh), value = TRUE)
D <- flowdh[, cols_det]
#Calculation of the other indices using NetIndices
for (i in 1:nrow(X))
{
# generate required flowmatrix for this solution
flowmatrix <- flowmat
flowmatrix[ii] <- as.matrix(X[i,flowmat[ii]])
flow <- flowmatrix[!rownames(flowmatrix) %in% c("LOS","RES"),
!rownames(flowmatrix) %in% c("FIX","IMP")]
# calculate all network indices. Functions from NetIndices
UU<-UncInd    (flow,Import=imp,Export=ext)
AA<-AscInd    (flow,Import=imp,Export=ext,Dissipation = res)
GG<-GenInd    (flow,Import=imp,Export=ext)
PP<-PathInd   (flow,Import=imp,Export=ext)
# System Omnivory Index
Tind <- TrophInd(flowmatrix, Import = imp, Export = ext, Dead = dead)
cons <- rownames(Tind[Tind$TL > 1.001, ]) # Consumers are living groups with
OIweight <- as.vector(log( colSums(flowmatrix[ ,cons])+1 ))   # Selecting TL higher than 1
SOI[i] <- weighted.mean(Tind[cons, ]$OI, OIweight)
# D/H
DH[i]<- sum(D[i,])/sum(H[i,])
# select the indices that will be in the graph
Ind<-unlist(c(UU[1],AA[1,],PP[3],GG[c(2,3)]))
Indices <- rbind(Indices,Ind)
}
ena <- cbind(Indices,SOI,DH)
# ena <- ena[,-c(3,4)]
}
rlim1 <- rlim1[sample(1:nrow(rlim1), 10000),]
rlim2 <- rlim2[sample(1:nrow(rlim2), 10000),]
# calculate all network indices. Functions from NetIndices
ena1 <- Indices(lim1,rlim1,c("FIX","IMP"),c("LOS","RES"),c("DET"),"RES")
ena2 <- Indices(lim2,rlim2,c("FIX","IMP"),c("LOS","RES"),c("DET"),"RES")
#Create date for figures
ena1 <- as.data.frame(ena1)
ena2 <- as.data.frame(ena2)
ena1$groupe <- "ena1"
ena2$groupe <- "ena2"
data <- bind_rows(ena1, ena2) %>%
pivot_longer(cols = -c("groupe"), names_to = "variable", values_to = "valeur")
medianes <- data %>%
filter(groupe == "ena1") %>%
group_by(variable) %>%
summarize(mediane = median(valeur)) %>%
arrange(desc(mediane)) %>%
pull(variable)
data$variable <- factor(data$variable, levels = medianes)
# Boxplot of each ENA
ggplot(data %>% filter(variable == "AMI"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "Ascendency"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "ACratio"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "FCI"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "T.."), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "TST"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "DH"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data %>% filter(variable == "SOI"), aes(x = variable, y = valeur,
fill = groupe)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(title = "Comparison of the BOWF and REEF models",
x = "Variables", y = "Values") +
scale_fill_discrete(name = "Models", labels = c("BOWF", "REEF")) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#install.packages("effsize")
library(effsize)
setwd("~/mon-site")
blogdown :: serve_site()
blogdown :: serve_site()
setwd("~/mon-site")
blogdown :: serve_site()
blogdown :: build_site()
blogdown::clean_site()
blogdown :: serve_site()
